/**
 * Service qu·∫£n l√Ω b·ªô nh·ªõ ƒë·ªám (cache) gi√∫p gi·∫£m s·ªë y√™u c·∫ßu API g·ª≠i ƒë·∫øn YouTube
 */

class CacheService {
    constructor() {
        this.cache = {};
        this.defaultExpiration = 1000 * 60 * 60; // 1 gi·ªù m·∫∑c ƒë·ªãnh
        this.extendRatio = 0.5; // H·ªá s·ªë gia h·∫°n, m·∫∑c ƒë·ªãnh l√† 50% th·ªùi gian ban ƒë·∫ßu
    }

    /**
     * L·∫•y d·ªØ li·ªáu t·ª´ cache
     * @param {string} key - Kh√≥a cache
     * @returns {any|null} - D·ªØ li·ªáu ƒë√£ cache ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
     */
    get(key) {
        const item = this.cache[key];
        if (!item) return null;

        // Ki·ªÉm tra xem cache c√≥ h·∫øt h·∫°n kh√¥ng
        if (item.expiry && item.expiry < Date.now()) {
            this.delete(key);
            return null;
        }

        // T·ª± ƒë·ªông gia h·∫°n cache khi truy c·∫≠p
        this._extendCacheExpiry(key, item);

        return item.value;
    }

    /**
     * Gia h·∫°n th·ªùi gian s·ªëng c·ªßa cache
     * @param {string} key - Kh√≥a cache
     * @param {Object} item - Item cache
     * @private
     */
    _extendCacheExpiry(key, item) {
        if (!item || !item.originalTTL) return;

        // T√≠nh th·ªùi gian c√≤n l·∫°i c·ªßa cache
        const remainingTime = item.expiry - Date.now();
        // N·∫øu th·ªùi gian c√≤n l·∫°i √≠t h∆°n 50% th·ªùi gian ban ƒë·∫ßu, gia h·∫°n th√™m
        if (remainingTime < item.originalTTL * 0.5) {
            // T√≠nh th√™m th·ªùi gian s·ªëng (t·ªëi ƒëa l√† originalTTL)
            const extensionTime = Math.min(
                item.originalTTL * this.extendRatio,
                item.originalTTL - remainingTime
            );

            // C·∫≠p nh·∫≠t th·ªùi gian h·∫øt h·∫°n
            item.expiry = item.expiry + extensionTime;
            console.log(`üîÑ Extended cache expiry for: ${key} by ${Math.round(extensionTime / 1000 / 60)} minutes`);

            // L∆∞u l·∫°i v√†o localStorage
            this._saveToLocalStorage();
        }
    }

    /**
     * L∆∞u d·ªØ li·ªáu v√†o cache
     * @param {string} key - Kh√≥a cache
     * @param {any} value - Gi√° tr·ªã c·∫ßn l∆∞u
     * @param {number|null} ttl - Th·ªùi gian s·ªëng t√≠nh b·∫±ng mili gi√¢y
     */
    set(key, value, ttl = null) {
        const originalTTL = ttl || this.defaultExpiration;
        const expiry = Date.now() + originalTTL;

        this.cache[key] = {
            value,
            expiry,
            originalTTL  // L∆∞u th·ªùi gian s·ªëng ban ƒë·∫ßu ƒë·ªÉ d√πng cho vi·ªác gia h·∫°n
        };

        // ƒê·ªìng th·ªùi l∆∞u v√†o localStorage ƒë·ªÉ ph·ª•c h·ªìi khi refresh trang
        this._saveToLocalStorage();
    }

    /**
     * X√≥a m·ªôt m·ª•c trong cache
     * @param {string} key - Kh√≥a cache c·∫ßn x√≥a
     */
    delete(key) {
        delete this.cache[key];
        this._saveToLocalStorage();
    }

    /**
     * X√≥a t·∫•t c·∫£ cache
     */
    clear() {
        this.cache = {};
        localStorage.removeItem('youtube_cache');
    }

    /**
     * L∆∞u cache v√†o localStorage
     * @private
     */
    _saveToLocalStorage() {
        try {
            localStorage.setItem('youtube_cache', JSON.stringify(this.cache));
        } catch (e) {
            console.warn('Kh√¥ng th·ªÉ l∆∞u cache v√†o localStorage:', e);
        }
    }

    /**
     * Ph·ª•c h·ªìi cache t·ª´ localStorage
     * @private
     */
    _loadFromLocalStorage() {
        try {
            const savedCache = localStorage.getItem('youtube_cache');
            if (savedCache) {
                this.cache = JSON.parse(savedCache);

                // ƒê·∫£m b·∫£o m·ªói item cache ƒë·ªÅu c√≥ originalTTL
                Object.keys(this.cache).forEach(key => {
                    const item = this.cache[key];
                    if (!item.originalTTL && item.expiry) {
                        // N·∫øu kh√¥ng c√≥ originalTTL, ∆∞·ªõc t√≠nh d·ª±a v√†o th·ªùi gian h·∫øt h·∫°n
                        item.originalTTL = item.expiry - Date.now();
                        // N·∫øu ∆∞·ªõc t√≠nh √¢m ho·∫∑c qu√° nh·ªè, g√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh
                        if (item.originalTTL <= 0) {
                            item.originalTTL = this.defaultExpiration;
                        }
                    }
                });

                // D·ªçn d·∫πp c√°c cache ƒë√£ h·∫øt h·∫°n
                this._cleanExpiredCache();
            }
        } catch (e) {
            console.warn('Kh√¥ng th·ªÉ ph·ª•c h·ªìi cache t·ª´ localStorage:', e);
        }
    }

    /**
     * D·ªçn d·∫πp c√°c cache ƒë√£ h·∫øt h·∫°n
     * @private
     */
    _cleanExpiredCache() {
        const now = Date.now();
        const expiredKeys = [];

        Object.keys(this.cache).forEach(key => {
            const item = this.cache[key];
            if (item.expiry && item.expiry < now) {
                expiredKeys.push(key);
            }
        });

        // X√≥a c√°c cache ƒë√£ h·∫øt h·∫°n
        expiredKeys.forEach(key => this.delete(key));

        // N·∫øu c√≥ cache b·ªã x√≥a, l∆∞u l·∫°i localStorage
        if (expiredKeys.length > 0) {
            console.log(`üßπ Cleaned ${expiredKeys.length} expired cache items`);
            this._saveToLocalStorage();
        }
    }

    /**
     * L·∫•y d·ªØ li·ªáu t·ª´ cache ho·∫∑c g·ªçi h√†m cung c·∫•p n·∫øu kh√¥ng c√≥ cache
     * @param {string} key - Kh√≥a cache
     * @param {Function} provider - H√†m tr·∫£ v·ªÅ Promise cung c·∫•p d·ªØ li·ªáu
     * @param {number|null} ttl - Th·ªùi gian s·ªëng t√≠nh b·∫±ng mili gi√¢y
     * @returns {Promise<any>} - D·ªØ li·ªáu t·ª´ cache ho·∫∑c h√†m cung c·∫•p
     */
    async getOrFetch(key, provider, ttl = null) {
        const cachedData = this.get(key);
        if (cachedData !== null) {
            console.log(`üîÑ Using cached data for: ${key.split('-')[0]}`);
            return cachedData;
        }

        try {
            const data = await provider();
            this.set(key, data, ttl);
            return data;
        } catch (error) {
            throw error;
        }
    }

    /**
     * Kh·ªüi t·∫°o cache t·ª´ localStorage
     */
    init() {
        this._loadFromLocalStorage();
    }
}

// T·∫°o instance singleton
const cacheService = new CacheService();
cacheService.init();

export default cacheService; 